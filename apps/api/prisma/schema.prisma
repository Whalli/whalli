generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String            @id @default(cuid())
  email             String            @unique
  name              String?
  image             String?
  password          String?           // For email/password auth (null for OAuth users)
  role              String            @default("user")
  subscriptionId    String?           @unique
  emailVerified     Boolean           @default(false)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  accounts          Account[]
  auditLogs         AuditLog[]
  messages          Message[]
  notifications     Notification[]
  projectMembers    ProjectMember[]
  ownedProjects     Project[]         @relation("ProjectOwner")
  recurringSearches RecurringSearch[]
  sessions          Session[]
  subscription      Subscription?
  assignedTasks     Task[]            @relation("TaskAssignee")

  @@index([email])
  @@map("user")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expiresAt    DateTime
  ipAddress    String?
  userAgent    String?
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("session")
}

model Account {
  id           String    @id @default(cuid())
  userId       String
  provider     String
  accountId    String
  accessToken  String?
  refreshToken String?
  idToken      String?
  expiresAt    DateTime?
  password     String?
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, accountId])
  @@index([userId])
  @@map("account")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())

  @@unique([identifier, value])
  @@map("verification")
}

model ChatSession {
  id        String   @id @default(cuid())
  userId    String
  modelId   String
  chatId    String?
  projectId String?
  taskId    String?
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@index([userId])
  @@index([chatId])
  @@index([expiresAt])
  @@map("chat_sessions")
}

model Subscription {
  id                   String           @id @default(cuid())
  userId               String           @unique
  stripeCustomerId     String?          @unique
  stripeSubscriptionId String?          @unique
  plan                 SubscriptionPlan @default(BASIC)
  status               String
  trialEndsAt          DateTime?
  createdAt            DateTime         @default(now())
  user                 User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([status])
  @@map("subscriptions")
}

model Company {
  id        String   @id @default(cuid())
  name      String   @unique
  logoUrl   String?
  createdAt DateTime @default(now())
  isActive  Boolean  @default(true)
  updatedAt DateTime @updatedAt
  website   String?
  models    Model[]

  @@index([name])
  @@map("companies")
}

model Model {
  id            String           @id @default(cuid())
  companyId     String
  name          String
  description   String?
  capabilities  Json?
  latencyHint   String?
  costEstimate  String?
  contextWindow Int?
  createdAt     DateTime         @default(now())
  displayName   String?
  isActive      Boolean          @default(true)
  maxOutput     Int?
  order         Int              @default(0)
  tierRequired  SubscriptionPlan @default(BASIC)
  updatedAt     DateTime         @updatedAt
  messages      Message[]
  company       Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, name])
  @@index([companyId])
  @@index([tierRequired])
  @@index([isActive])
  @@map("models")
}

model Project {
  id          String          @id @default(cuid())
  ownerId     String
  title       String
  description String?
  createdAt   DateTime        @default(now())
  messages    Message[]
  mindmaps    Mindmap[]
  members     ProjectMember[]
  owner       User            @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  tasks       Task[]

  @@index([ownerId])
  @@map("projects")
}

model Mindmap {
  id        String        @id @default(cuid())
  projectId String
  title     String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  edges     MindmapEdge[]
  nodes     MindmapNode[]
  project   Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@map("mindmaps")
}

model MindmapNode {
  id        String        @id @default(cuid())
  mindmapId String
  label     String
  positionX Float
  positionY Float
  metadata  Json?
  edgesFrom MindmapEdge[] @relation("EdgeSource")
  edgesTo   MindmapEdge[] @relation("EdgeTarget")
  mindmap   Mindmap       @relation(fields: [mindmapId], references: [id], onDelete: Cascade)

  @@index([mindmapId])
  @@map("mindmap_nodes")
}

model MindmapEdge {
  id        String      @id @default(cuid())
  mindmapId String
  sourceId  String
  targetId  String
  label     String?
  metadata  Json?
  mindmap   Mindmap     @relation(fields: [mindmapId], references: [id], onDelete: Cascade)
  source    MindmapNode @relation("EdgeSource", fields: [sourceId], references: [id], onDelete: Cascade)
  target    MindmapNode @relation("EdgeTarget", fields: [targetId], references: [id], onDelete: Cascade)

  @@index([mindmapId])
  @@index([sourceId])
  @@index([targetId])
  @@map("mindmap_edges")
}

model ProjectMember {
  id        String  @id @default(cuid())
  projectId String
  userId    String
  role      String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId], name: "userId_projectId")
  @@index([projectId])
  @@map("project_members")
}

model Task {
  id             String    @id @default(cuid())
  projectId      String
  assigneeId     String?
  title          String
  description    String?
  status         String
  dueDate        DateTime?
  recurrenceRule String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  messages       Message[] @relation("TaskMessages")
  assignee       User?     @relation("TaskAssignee", fields: [assigneeId], references: [id])
  project        Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([assigneeId])
  @@map("tasks")
}

model Message {
  id                 String       @id @default(cuid())
  userId             String
  projectId          String?
  taskId             String?
  content            String
  modelId            String?
  createdAt          DateTime     @default(now())
  messageAttachments Attachment[]
  model              Model?       @relation(fields: [modelId], references: [id])
  project            Project?     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  task               Task?        @relation("TaskMessages", fields: [taskId], references: [id], onDelete: Cascade)
  user               User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([taskId])
  @@map("messages")
}

model Attachment {
  id        String   @id @default(cuid())
  messageId String?
  url       String
  type      String
  metadata  Json?
  message   Message? @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@map("attachments")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  action    String
  targetId  String?
  metadata  Json?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([action])
  @@map("audit_logs")
}

model RecurringSearch {
  id            String         @id @default(cuid())
  userId        String
  query         String
  intervalType  String
  intervalValue String
  isActive      Boolean        @default(true)
  lastRunAt     DateTime?
  nextRunAt     DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  results       SearchResult[]

  @@index([userId])
  @@index([isActive])
  @@index([nextRunAt])
  @@map("recurring_searches")
}

model SearchResult {
  id                String          @id @default(cuid())
  recurringSearchId String
  query             String
  results           Json
  resultCount       Int
  executedAt        DateTime        @default(now())
  recurringSearch   RecurringSearch @relation(fields: [recurringSearchId], references: [id], onDelete: Cascade)

  @@index([recurringSearchId])
  @@index([executedAt])
  @@map("search_results")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  metadata  Json?
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
  @@map("notifications")
}

enum SubscriptionPlan {
  BASIC
  PRO
  ENTERPRISE
}

enum NotificationType {
  SUBSCRIPTION_EXPIRING
  SUBSCRIPTION_EXPIRED
  TASK_DEADLINE_SOON
  TASK_DEADLINE_PASSED
  TASK_ASSIGNED
  RECURRING_SEARCH_RESULT
  PROJECT_INVITATION
  PAYMENT_FAILED
  PAYMENT_SUCCESS
}
