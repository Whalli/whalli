// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(cuid())
  email          String   @unique
  name           String?
  avatar         String?
  role           String   @default("user")
  subscriptionId String?  @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  sessions          Session[]
  subscription      Subscription?
  ownedProjects     Project[]         @relation("ProjectOwner")
  projectMembers    ProjectMember[]
  assignedTasks     Task[]            @relation("TaskAssignee")
  messages          Message[]
  auditLogs         AuditLog[]
  recurringSearches RecurringSearch[]
  notifications     Notification[]

  @@index([email])
  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime
  data      Json?

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model ChatSession {
  id        String   @id @default(cuid())
  userId    String
  modelId   String
  chatId    String?  // Optional: group multiple sessions into a conversation
  projectId String?
  taskId    String?
  createdAt DateTime @default(now())
  expiresAt DateTime // Auto-expire old sessions (e.g., 10 minutes)

  @@index([userId])
  @@index([chatId])
  @@index([expiresAt])
  @@map("chat_sessions")
}

model Subscription {
  id                   String           @id @default(cuid())
  userId               String           @unique
  stripeCustomerId     String?          @unique
  stripeSubscriptionId String?          @unique
  plan                 SubscriptionPlan @default(BASIC)
  status               String
  trialEndsAt          DateTime?
  createdAt            DateTime         @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([status])
  @@map("subscriptions")
}

model Company {
  id        String   @id @default(cuid())
  name      String   @unique
  logoUrl   String?
  website   String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  models Model[]

  @@index([name])
  @@map("companies")
}

model Model {
  id            String           @id @default(cuid())
  companyId     String
  name          String
  displayName   String?          // User-friendly name (e.g., "GPT-4 Turbo")
  description   String?
  capabilities  Json?            // ["chat", "completion", "function-calling"]
  contextWindow Int?             // Max context window (e.g., 128000)
  maxOutput     Int?             // Max output tokens (e.g., 4096)
  latencyHint   String?          // "fast", "medium", "slow"
  costEstimate  String?          // "low", "medium", "high"
  tierRequired  SubscriptionPlan @default(BASIC) // Minimum tier required
  isActive      Boolean          @default(true)
  order         Int              @default(0) // Display order in UI
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  // Relations
  company  Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  messages Message[]

  @@unique([companyId, name])
  @@index([companyId])
  @@index([tierRequired])
  @@index([isActive])
  @@map("models")
}

model Project {
  id          String   @id @default(cuid())
  ownerId     String
  title       String
  description String?
  createdAt   DateTime @default(now())

  // Relations
  owner    User            @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members  ProjectMember[]
  tasks    Task[]
  messages Message[]
  mindmaps Mindmap[]

  @@index([ownerId])
  @@map("projects")
}

model Mindmap {
  id        String   @id @default(cuid())
  projectId String
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  project Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  nodes   MindmapNode[]
  edges   MindmapEdge[]

  @@index([projectId])
  @@map("mindmaps")
}

model MindmapNode {
  id        String  @id @default(cuid())
  mindmapId String
  label     String
  positionX Float
  positionY Float
  metadata  Json?

  // Relations
  mindmap     Mindmap       @relation(fields: [mindmapId], references: [id], onDelete: Cascade)
  edgesFrom   MindmapEdge[] @relation("EdgeSource")
  edgesTo     MindmapEdge[] @relation("EdgeTarget")

  @@index([mindmapId])
  @@map("mindmap_nodes")
}

model MindmapEdge {
  id        String  @id @default(cuid())
  mindmapId String
  sourceId  String
  targetId  String
  label     String?
  metadata  Json?

  // Relations
  mindmap Mindmap     @relation(fields: [mindmapId], references: [id], onDelete: Cascade)
  source  MindmapNode @relation("EdgeSource", fields: [sourceId], references: [id], onDelete: Cascade)
  target  MindmapNode @relation("EdgeTarget", fields: [targetId], references: [id], onDelete: Cascade)

  @@index([mindmapId])
  @@index([sourceId])
  @@index([targetId])
  @@map("mindmap_edges")
}

model ProjectMember {
  id        String @id @default(cuid())
  projectId String
  userId    String
  role      String

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId], name: "userId_projectId")
  @@index([projectId])
  @@map("project_members")
}

model Task {
  id             String    @id @default(cuid())
  projectId      String
  assigneeId     String?
  title          String
  description    String?
  status         String
  dueDate        DateTime?
  recurrenceRule String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  project  Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignee User?    @relation("TaskAssignee", fields: [assigneeId], references: [id], onDelete: SetNull)
  messages Message[] @relation("TaskMessages")

  @@index([projectId])
  @@index([assigneeId])
  @@map("tasks")
}

model Message {
  id        String   @id @default(cuid())
  userId    String
  projectId String?
  taskId    String?
  content   String
  modelId   String?
  createdAt DateTime @default(now())

  // Relations
  user               User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  project            Project?     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  task               Task?        @relation("TaskMessages", fields: [taskId], references: [id], onDelete: Cascade)
  model              Model?       @relation(fields: [modelId], references: [id], onDelete: SetNull)
  messageAttachments Attachment[]

  @@index([projectId])
  @@index([taskId])
  @@map("messages")
}

model Attachment {
  id        String  @id @default(cuid())
  messageId String?
  url       String
  type      String
  metadata  Json?

  // Relations
  message Message? @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@map("attachments")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  action    String
  targetId  String?
  metadata  Json?
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([action])
  @@map("audit_logs")
}

model RecurringSearch {
  id              String   @id @default(cuid())
  userId          String
  query           String
  intervalType    String   // 'cron' or 'hours'
  intervalValue   String   // cron expression or number of hours
  isActive        Boolean  @default(true)
  lastRunAt       DateTime?
  nextRunAt       DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user    User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  results SearchResult[]

  @@index([userId])
  @@index([isActive])
  @@index([nextRunAt])
  @@map("recurring_searches")
}

model SearchResult {
  id                String   @id @default(cuid())
  recurringSearchId String
  query             String
  results           Json     // Array of search results
  resultCount       Int
  executedAt        DateTime @default(now())

  // Relations
  recurringSearch RecurringSearch @relation(fields: [recurringSearchId], references: [id], onDelete: Cascade)

  @@index([recurringSearchId])
  @@index([executedAt])
  @@map("search_results") 
}

model Notification {
  id        String            @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  metadata  Json?             // Store additional data (taskId, projectId, etc.)
  isRead    Boolean           @default(false)
  createdAt DateTime          @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
  @@map("notifications")
}

// Enums
enum SubscriptionPlan {
  BASIC
  PRO
  ENTERPRISE
}

enum NotificationType {
  SUBSCRIPTION_EXPIRING
  SUBSCRIPTION_EXPIRED
  TASK_DEADLINE_SOON
  TASK_DEADLINE_PASSED
  TASK_ASSIGNED
  RECURRING_SEARCH_RESULT
  PROJECT_INVITATION
  PAYMENT_FAILED
  PAYMENT_SUCCESS
}