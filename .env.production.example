# ========================================
# PRODUCTION ENVIRONMENT VARIABLES
# ========================================
# Copy this file to .env and fill in your actual values
# Never commit .env to version control!

# ========================================
# DOMAIN CONFIGURATION
# ========================================
DOMAIN=mydomain.com
ACME_EMAIL=admin@mydomain.com

# ========================================
# DATABASE CONFIGURATION (Neon Postgres)
# ========================================
# Get this from your Neon dashboard: https://console.neon.tech/
# Format: postgresql://user:password@hostname/database?sslmode=require
DATABASE_URL=postgresql://user:password@ep-xxxx-xxxx.us-east-2.aws.neon.tech/whalli?sslmode=require

# ========================================
# REDIS CONFIGURATION
# ========================================
REDIS_PASSWORD=your-super-secure-redis-password-here
REDIS_URL=redis://:your-super-secure-redis-password-here@redis:6379

# ========================================
# MINIO CONFIGURATION (S3-compatible storage)
# ========================================
MINIO_ROOT_USER=minioadmin
MINIO_ROOT_PASSWORD=your-super-secure-minio-password-here
MINIO_BUCKET=whalli-uploads

# ========================================
# AUTHENTICATION SECRETS
# ========================================
# Generate with: openssl rand -base64 32
JWT_SECRET=your-jwt-secret-key-here-minimum-32-characters
BETTER_AUTH_SECRET=your-better-auth-secret-here-minimum-32-characters

# ========================================
# OAUTH PROVIDERS (GitHub)
# ========================================
# Create OAuth app: https://github.com/settings/developers
# Callback URLs:
# - https://app.mydomain.com/api/auth/callback/github
# - https://admin.mydomain.com/api/auth/callback/github
GITHUB_CLIENT_ID=your-github-client-id
GITHUB_CLIENT_SECRET=your-github-client-secret

# ========================================
# OAUTH PROVIDERS (Google)
# ========================================
# Create OAuth app: https://console.cloud.google.com/apis/credentials
# Authorized redirect URIs:
# - https://app.mydomain.com/api/auth/callback/google
# - https://admin.mydomain.com/api/auth/callback/google
GOOGLE_CLIENT_ID=your-google-client-id.apps.googleusercontent.com
GOOGLE_CLIENT_SECRET=your-google-client-secret

# ========================================
# STRIPE CONFIGURATION
# ========================================
# Get keys from: https://dashboard.stripe.com/apikeys
STRIPE_SECRET_KEY=your_stripe_secret_key_here
STRIPE_WEBHOOK_SECRET=your_stripe_webhook_secret_here
NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=your_stripe_publishable_key_here

# Stripe Price IDs (from your Stripe dashboard)
STRIPE_BASIC_PRICE_ID=your_basic_price_id_here
STRIPE_PRO_PRICE_ID=your_pro_price_id_here
STRIPE_ENTERPRISE_PRICE_ID=price_xxxxxxxxxxxxxxxxxxxx

# ========================================
# AI PROVIDER API KEYS
# ========================================
# OpenAI: https://platform.openai.com/api-keys
OPENAI_API_KEY=sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

# Anthropic: https://console.anthropic.com/settings/keys
ANTHROPIC_API_KEY=sk-ant-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

# xAI/Grok: https://console.x.ai/
XAI_API_KEY=xai-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

# ========================================
# EMAIL CONFIGURATION (SMTP)
# ========================================
# Example for Gmail:
# SMTP_HOST=smtp.gmail.com
# SMTP_PORT=465
# SMTP_SECURE=true
# SMTP_USER=your-email@gmail.com
# SMTP_PASSWORD=your-app-specific-password

# Example for SendGrid:
# SMTP_HOST=smtp.sendgrid.net
# SMTP_PORT=587
# SMTP_SECURE=false
# SMTP_USER=apikey
# SMTP_PASSWORD=SG.xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

SMTP_HOST=smtp.gmail.com
SMTP_PORT=465
SMTP_SECURE=true
SMTP_USER=your-email@gmail.com
SMTP_PASSWORD=your-app-specific-password
SMTP_FROM_EMAIL=noreply@mydomain.com
SMTP_FROM_NAME=Whalli

# ========================================
# RATE LIMITING
# ========================================
RATE_LIMIT_ENABLED=true

# ========================================
# TRAEFIK AUTHENTICATION
# ========================================
# Generate with: htpasswd -nb admin your-password
# Or: echo $(htpasswd -nb admin your-password) | sed -e s/\\$/\\$\\$/g
# Result format: admin:$$apr1$$xxxxxxxxxxxxxxxxxxxx
TRAEFIK_AUTH=admin:$$apr1$$xxxxxxxxxxxxxxxxxxxx

# ========================================
# PROMETHEUS AUTHENTICATION
# ========================================
# Generate with: htpasswd -nb admin your-password
# Or: echo $(htpasswd -nb admin your-password) | sed -e s/\\$/\\$\\$/g
PROMETHEUS_AUTH=admin:$$apr1$$xxxxxxxxxxxxxxxxxxxx

# ========================================
# GRAFANA CONFIGURATION
# ========================================
GRAFANA_ADMIN_USER=admin
GRAFANA_ADMIN_PASSWORD=your-super-secure-grafana-password-here

# ========================================
# PRODUCTION DEPLOYMENT NOTES
# ========================================
# 1. Neon Postgres Setup:
#    - Create account at https://neon.tech/
#    - Create new project
#    - Copy connection string to DATABASE_URL
#    - Connection string includes SSL by default
#
# 2. Domain Configuration:
#    - Point DNS A records to your server IP:
#      - mydomain.com -> YOUR_SERVER_IP
#      - *.mydomain.com -> YOUR_SERVER_IP (wildcard for subdomains)
#    - Let's Encrypt will auto-generate SSL certificates
#
# 3. Generate Secure Passwords:
#    openssl rand -base64 32
#
# 4. Generate Basic Auth for Traefik/Prometheus:
#    htpasswd -nb admin your-password
#    # Then escape $ with $$ for docker-compose
#
# 5. Required Subdomains (configured in Traefik):
#    - app.mydomain.com -> Web application
#    - api.mydomain.com -> API backend
#    - admin.mydomain.com -> Admin panel
#    - grafana.mydomain.com -> Grafana dashboard
#    - prometheus.mydomain.com -> Prometheus metrics
#    - storage.mydomain.com -> MinIO S3 API
#    - minio.mydomain.com -> MinIO console
#    - traefik.mydomain.com -> Traefik dashboard
#
# 6. Deployment Commands:
#    docker-compose -f docker-compose.prod.yml up -d
#    docker-compose -f docker-compose.prod.yml logs -f
#    docker-compose -f docker-compose.prod.yml down
#
# 7. Database Migrations:
#    docker-compose -f docker-compose.prod.yml exec api pnpm prisma migrate deploy
#
# 8. Health Checks:
#    curl https://api.mydomain.com/api/health
#    curl https://app.mydomain.com
#    curl https://admin.mydomain.com
